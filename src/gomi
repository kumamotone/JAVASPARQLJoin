

        // Add delay in order to be nice to the remote server (delay in milli seconds)
        // qef = new QueryExecutionFactoryDelay(qef, 5000);

        // Set up a cache
        // Cache entries are valid for 1 day
        // long timeToLive = 0;// 24l * 60l * 60l * 1000l;

        // This creates a 'cache' folder, with a database file named 'sparql.db'
        // Technical note: the cacheBackend's purpose is to only deal with streams,
        // whereas the frontend interfaces with higher level classes - i.e. ResultSet and Model

        //		CacheBackend cacheBackend = CacheCoreH2.create("sparql", timeToLive, true);
        //		CacheFrontend cacheFrontend = new CacheFrontendImpl(cacheBackend);
        //		qef = new QueryExecutionFactoryCacheEx(qef, cacheFrontend);

        // QueryExecutionFactoryHttp foo = qef.unwrap(QueryExecutionFactoryHttp.class);
        // System.out.println(foo);

        // Add pagination
        // qef = new QueryExecutionFactoryPaginated(qef, 900);

        // Create a QueryExecution object from a query string ...


        // and run it.